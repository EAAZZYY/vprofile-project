#!/bin/bash

pipeline {
    agent any
    tools {
        maven "maven3"
        jdk "OracleJDK8"
    }

    environment {
        SNAP_REPO = "vprofile-snapshot"
        CENTRAL_REPO = "vprofile-maven-central"
        RELEASE_REPO = "vprofile-release"
        NEXUS_GRP_REPO = "vprofile-grouped"
        NEXUSIP = "172.31.23.49"
        NEXUSPORT = '8081'
        NEXUS_LOGIN = "nexuslogin"
        NEXUS_USER = "${env.NEXUS_USER}"
        NEXUS_PASS = "${env.NEXUS_PASS}"

        // ECR configuration
        AWS_REGION = 'us-east-1'  // Replace with your AWS region
        AWS_ACCOUNT_ID = '211125481024'  // Replace with your AWS account ID
        ECR_REPO_NAME = 'vprofile'  // Replace with your ECR repository name
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    }

    stages {
        stage ("Build Artifact") {
            steps {
                script {
                    sh 'mvn -s settings.xml -DskipTests install'
                }
            }
        }

        stage('Upload Artifact to Nexus') {
            steps {
                script {
                    nexusArtifactUploader(
                        nexusVersion: "nexus3",
                        protocol: 'http',
                        nexusUrl: "${NEXUSIP}:${NEXUSPORT}",
                        groupId: "QA",
                        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                        repository: "${RELEASE_REPO}",
                        credentialsId: "${NEXUS_LOGIN}",
                        artifacts: [
                            [artifactId: "vprofile", 
                            classifier: '', 
                            file: 'target/vprofile-v2.war', 
                            type: 'war']
                        ]
                    )
                }
            }
        }

        stage("Docker Build"){
            steps {
                script {
                    sh "docker build -t ${DOCKER_IMAGE} -f ./Docker-files/app/Dockerfile ."
                }
            }
        }

        stage("Docker ECR Push") {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'jenkins-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                    }
                }
            }
        }

        stage('clean Workspace') {
            steps {
                cleanWs()
            }
        }
    }
}